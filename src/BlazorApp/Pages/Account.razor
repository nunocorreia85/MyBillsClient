@page "/account"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons

<div class="control-section">
    <div class="col-lg-12 control-section">        
        <div class="content-wrapper">
            <h1>Account</h1>
            <div class="control-label">Name</div>
            <SfTextBox @bind-Value="@Name"></SfTextBox>
            <div class="control-label">Postal Code</div>
            <SfTextBox @bind-Value="@PostalCode"></SfTextBox>
            <div class="control-label">Country</div>
            <SfTextBox @bind-Value="@Country"></SfTextBox>
            <div class="control-label">Balance Code</div>
            <SfNumericTextBox @bind-Value="@Balance" TValue="decimal" Format="c2"></SfNumericTextBox>
            <div class="control-label">Bank Account</div>
            <SfTextBox @bind-Value="@BankAccountNumber"></SfTextBox>
            <SfButton CssClass="e-success" @onclick="@Submit">Submit</SfButton>
        </div>        
    </div>
</div>

<style>
    .content-wrapper {
        width: 45%;
        margin: 0 auto;
        min-width: 185px;
    }

    .control-label {
        padding: 24px 0px 10px 0px;
        font-size: 12px;
    }

    .e-float-input.e-numeric.e-input-group {
        margin-top: 40px;
    }
</style>

@code {

    private string _authMessage;
    public string Name { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal Balance { get; set; }
    public string BankAccountNumber { get; set; }
    public string ExternalId { get; set; }

    public async Task Submit()
    {
        if(!string.IsNullOrEmpty(ExternalId))
        {
            var client = ClientFactory.CreateClient("serverAPI");
            var command = new CreateAccountCommand()
            {
                Balance = Balance,
                BankAccountNumber = BankAccountNumber,
                ExternalId = Guid.NewGuid().ToString()
            };
            await client.PostAsJsonAsync<CreateAccountCommand>("accounts", command);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _authMessage = "The user is NOT authenticated.";
            return;
        }

        ExternalId = user.FindFirst("oid")?.Value;
        Name = user.FindFirst("name")?.Value;
        PostalCode = user.FindFirst("postalCode")?.Value;
        Country = user.FindFirst("country")?.Value;

        try
        {
            var client = ClientFactory.CreateClient("serverAPI");

            var account = await client.GetStringAsync("accounts");
            Console.WriteLine(account);
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public class AccountModel
    {
        public long Id { get; set; }
        public Guid ExternalId { get; set; }
        public decimal Balance { get; set; }
        public string BankAccountNumber { get; set; }
        public bool Closed { get; set; }
    }

    public class CreateAccountCommand
    {
        public string ExternalId { get; set; }
        public decimal Balance { get; set; }
        public string BankAccountNumber { get; set; }
    }
}
