@page "/account"
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using MyBills.Application.Shared.Accounts.Commands
@using MyBills.Domain
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;
@using Syncfusion.Blazor.DropDowns

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory

@if (IsLoading)
{
    <SfSpinner @bind-Visible="@IsLoading">
    </SfSpinner>
}
else
{

    <form>
        <div class="mb-3">
            <label for="emails" class="form-label">Email address</label>
            <SfMultiSelect ID="emails" Value="@Emails" TValue="string[]" Mode="@VisualMode.Default" Placeholder="Favorite Sports" DataSource="@Emails" />
            <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
        </div>
        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input type="text" disabled class="form-control" id="name" value="@Name">
        </div>
        <div class="mb-3 form-check">
            <input type="checkbox" class="form-check-input" id="isActive">
            <label class="form-check-label" for="isActive">Is Active</label>
        </div>
        <div class="mb-3">
            <label for="postalCode" class="form-label">PostalCode</label>
            <input type="text" disabled class="form-control" id="postalCode" value="@PostalCode">
        </div>
        <div class="mb-3">
            <label for="country" class="form-label">Country</label>
            <input type="text" disabled class="form-control" id="country" value="@Country">
        </div>
        <div class="mb-3">
            <label for="balance" class="form-label">Balance</label>
            <SfNumericTextBox ID="balance" @bind-Value="@Balance" TValue="decimal" Format="c2" />
        </div>
        <div class="mb-3">
            <label for="bankAccountNumber" class="form-label">Bank Account</label>
            <SfTextBox ID="bankAccountNumber" @bind-Value="@BankAccountNumber" />
        </div>
        <SfButton CssClass="e-success" @onclick="@Submit" Content="@CreateOrUpdate" />
    </form>
}

@code {

    public string Name { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal Balance { get; set; }
    public string BankAccountNumber { get; set; }
    public string ExternalId { get; set; }
    public long Id { get; set; }
    public bool HasAccount { get; set; }
    public string CreateOrUpdate { get => HasAccount ? "Update" : "Create"; }
    public bool IsLoading { get; set; }
    public string[] Emails { get; set; }

    public async Task Submit()
    {
        IsLoading = true;
        if (!string.IsNullOrEmpty(ExternalId))
        {
            var client = ClientFactory.CreateClient("ServerAPI");
            HttpResponseMessage response;
            if (HasAccount)
            {
                var updateCommand = new UpdateAccountCommand()
                {
                    BankAccountNumber = BankAccountNumber,
                    Id = Id
                };
                response = await client.PutAsJsonAsync<UpdateAccountCommand>("accounts", updateCommand);

            }
            else
            {
                var createCommand = new CreateAccountCommand()
                {
                    BankAccountNumber = BankAccountNumber,
                    Balance = Balance,
                    ExternalId = new Guid(ExternalId)
                };

                response = await client.PostAsJsonAsync<CreateAccountCommand>("accounts", createCommand);
            }
        }

        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        Emails = System.Text.Json.JsonSerializer.Deserialize<string[]>(user.FindFirst("emails")?.Value);
        ExternalId = user.FindFirst("oid")?.Value;
        Name = user.FindFirst("name")?.Value;
        PostalCode = user.FindFirst("postalCode")?.Value;
        Country = user.FindFirst("country")?.Value;

        foreach (var item in user.Claims)
        {
            Console.WriteLine($"{item.Value} {item.ValueType} {item.Type}");
        }

        try
        {
            var client = ClientFactory.CreateClient("ServerAPI");

            var accounts = await client.GetFromJsonAsync<List<MyBills.Domain.Entities.Account>>($"accounts?externalIds={ExternalId}");
            var account = accounts.SingleOrDefault();
            if (account == null)
            {
                IsLoading = false;
                return;
            }

            Balance = account.Balance;
            BankAccountNumber = account.BankAccountNumber;
            var closed = account.Closed;
            Id = account.Id;
            HasAccount = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            IsLoading = false;
        }
    }
}