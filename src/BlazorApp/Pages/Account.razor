@page "/account"
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Spinner
@using MyBills.Application.Shared.Accounts.Commands
@using MyBills.Domain.Entities
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication;

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory

@if (IsLoading)
{
    <SfSpinner @bind-Visible="@IsLoading">
    </SfSpinner>
}
else
{

<div class="row">
    <div class="col-sm-4">Name</div>
    <div class="col">@Name</div>
</div>
<div class="row">
    <div class="col-sm-4">Postal Code</div>
    <div class="col">@PostalCode</div>
</div>
<div class="row">
    <div class="col-sm-4">Country</div>
    <div class="col">@Country</div>
</div>
<div class="row">
    <div class="col-sm-4">Balance Code</div>    
    <div class="col"><SfNumericTextBox @bind-Value="@Balance" TValue="decimal" Format="c2" /></div>
</div>
<div class="row">
    <div class="col-sm-4">Bank Account</div>
    <div class="col"><SfTextBox @bind-Value="@BankAccountNumber" /></div>
</div>
<div class="row">
    <div class="col-3"><SfButton CssClass="e-success" @onclick="@Submit" Content="@CreateOrUpdate"></SfButton></div>        
</div>

}

@code {

    public string Name { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal Balance { get; set; }
    public string BankAccountNumber { get; set; }
    public string ExternalId { get; set; }
    public long Id { get; set; }
    public bool HasAccount { get; set; }
    public string CreateOrUpdate { get => HasAccount ? "Update" : "Create"; }
    public bool IsLoading { get; set; }

    public async Task Submit()
    {
        IsLoading = true;
        if (!string.IsNullOrEmpty(ExternalId))
        {
            var client = ClientFactory.CreateClient("ServerAPI");
            HttpResponseMessage response;
            if (HasAccount)
            {
                var updateCommand = new UpdateAccountCommand()
                {
                    BankAccountNumber = BankAccountNumber,
                    Id = Id
                };
                response = await client.PutAsJsonAsync<UpdateAccountCommand>("accounts", updateCommand);

            }
            else
            {
                var createCommand = new CreateAccountCommand()
                {
                    BankAccountNumber = BankAccountNumber,
                    Balance = Balance,
                    ExternalId = new Guid(ExternalId)
                };

                response = await client.PostAsJsonAsync<CreateAccountCommand>("accounts", createCommand);
            }
        }

        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            return;
        }

        ExternalId = user.FindFirst("oid")?.Value;
        Name = user.FindFirst("name")?.Value;
        PostalCode = user.FindFirst("postalCode")?.Value;
        Country = user.FindFirst("country")?.Value;

        try
        {
            var client = ClientFactory.CreateClient("ServerAPI");

            var accounts = await client.GetFromJsonAsync<List<Account>>($"accounts?externalIds={ExternalId}");
            var account = accounts.SingleOrDefault();
            if (account == null)
            {
                IsLoading = false;
                return;
            }

            Balance = account.Balance;
            BankAccountNumber = account.BankAccountNumber;
            Id = account.Id;
            HasAccount = true;
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        finally
        {
            IsLoading = false;
        }
    }
}