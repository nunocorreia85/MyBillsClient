@page "/account"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@using Syncfusion.Blazor.InPlaceEditor
@using Syncfusion.Blazor.Buttons

<div class="row">
    <div class="col-lg-6 control-section inplace-control-section default_layout">
        <div class="control_wrapper">
            <table>
                <tr>
                    <td>
                        <h1>Account</h1>
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">Name</label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Text" Value="@Name" SubmitOnEnter="false" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">Postal Code</label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Text" Value="@PostalCode" SubmitOnEnter="false" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">Country</label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Text" Value="@Country" SubmitOnEnter="false" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">Balance</label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Numeric" Value="@Balance" SubmitOnEnter="false" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <label class="control-label">AccountNumber</label>
                    </td>
                    <td>
                        <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Text" Value="@BankAccountNumber" SubmitOnEnter="false" />
                    </td>
                </tr>
                <tr>
                    <td>
                        <SfButton>Normal</SfButton>
                    </td>
                </tr>
            </table>
        </div>
    </div>
</div>

@code {

    private string _authMessage;
    public string Name { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal Balance { get; set; }
    public string BankAccountNumber { get; set; }
    public string ExternalId { get; set; }

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _authMessage = "The user is NOT authenticated.";
            return;
        }

        ExternalId = user.FindFirst("oid")?.Value;
        Name = user.FindFirst("name")?.Value;
        PostalCode = user.FindFirst("postalCode")?.Value;
        Country = user.FindFirst("country")?.Value;

        try
        {
            var client = ClientFactory.CreateClient("serverAPI");

            var accountText = await client.GetStringAsync("accounts?id=0");
            Console.WriteLine(accountText);
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    public class AccountModel
    {
        public long Id { get; set; }
        public Guid ExternalId { get; set; }
        public decimal Balance { get; set; }
        public string BankAccountNumber { get; set; }
        public bool Closed { get; set; }

    }
}