@page "/account"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
@using Syncfusion.Blazor.InPlaceEditor

<table>
    <tr>
        <td>
            <label class="control-label">
                TextBox
            </label>
        </td>
        <td>
            <SfInPlaceEditor Mode="RenderMode.Inline" Type="InputType.Text" Value="@BankAccount" SubmitOnEnter="true">
            </SfInPlaceEditor>
        </td>
    </tr>
</table>
@if (_claims.Count() > 0)
{
    <ul>
        @foreach (var claim in _claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}
<p>@_authMessage</p>

@code {

    private string _authMessage;
    private string Name;
    private string PostalCode;
    private string BankAccount;
    private string Country;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity.IsAuthenticated)
        {
            _authMessage = "The user is NOT authenticated.";
            return;
        }

        _authMessage = $"{user.Identity.Name} is authenticated.";
        _claims = user.Claims;
        Name = user.FindFirst(c => c.Type == ClaimTypes.Name)?.Value;
        PostalCode = user.FindFirst(c => c.Type == ClaimTypes.PostalCode)?.Value;
        Country = user.FindFirst(c => c.Type == ClaimTypes.Country)?.Value;

        try
        {
            var client = ClientFactory.CreateClient("ServerAPI");

            var account = await client.GetStringAsync("accounts?id=1");
            Console.WriteLine(account);
        }
        //catch (AccessTokenNotAvailableException exception)
        //{
        //    exception.Redirect();
        //}
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }
}
