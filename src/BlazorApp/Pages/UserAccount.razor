@page "/userAccount"

@using MyBills.Application.Shared.Accounts.Commands
@using MyBills.Domain.Entities
@using System.Text.Json

@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpClientFactory ClientFactory
<div class="container-sm">
    @if (IsLoading)
    {
        <SfSpinner @bind-Visible="@IsLoading"></SfSpinner>    }
    else
    {
        <form>
            <div class="mb-3">
                <label for="emails" class="form-label">Email address</label>
                <SfMultiSelect ID="emails" Value="@Model.Emails" TValue="string[]" Mode="@VisualMode.Default" Placeholder="Favorite Sports" DataSource="@Model.Emails"/>
                <div id="emailHelp" class="form-text">We'll never share your email with anyone else.</div>
            </div>
            <div class="mb-3">
                <label for="name" class="form-label">Name</label>
                <input type="text" disabled class="form-control" id="name" value="@Model.Name">
            </div>
            <div class="mb-3">
                <label for="postalCode" class="form-label">PostalCode</label>
                <input type="text" disabled class="form-control" id="postalCode" value="@Model.PostalCode">
            </div>
            <div class="mb-3">
                <label for="country" class="form-label">Country</label>
                <input type="text" disabled class="form-control" id="country" value="@Model.Country">
            </div>
            <div class="mb-3">
                <label for="balance" class="form-label">Balance</label>
                <SfNumericTextBox ID="balance" @bind-Value="@Model.Balance" TValue="decimal" Format="c2"/>
            </div>
            <div class="mb-3">
                <label for="bankAccountNumber" class="form-label">Bank Account</label>
                <SfTextBox ID="bankAccountNumber" @bind-Value="@Model.BankAccountNumber"/>
            </div>
            <div class="mb-3">
                <SfButton CssClass="e-success" @onclick="@Submit" Content="@Model.CreateOrUpdate"/>
            </div>
            <div class="mb-3 form-check">
                <input type="checkbox" class="form-check-input" id="isClosed" checked="@Model.Closed">
                <label class="form-check-label" for="isClosed">Is Closed</label>
            </div>
        </form>
    }
</div>

@code {

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private bool IsLoading { get; set; }
    private AccountModel Model { get; set; }

    private async Task Submit()
    {
        IsLoading = true;
        var client = ClientFactory.CreateClient("ServerAPI");
        if (Model.HasAccount)
        {
            var updateCommand = new UpdateAccountCommand
            {
                BankAccountNumber = Model.BankAccountNumber,
                Id = Model.Id
            };
            await client.PutAsJsonAsync("accounts", updateCommand);
        }
        else
        {
            var createCommand = new CreateAccountCommand
            {
                BankAccountNumber = Model.BankAccountNumber,
                Balance = Model.Balance,
                ExternalId = Model.ExternalId
            };

            await client.PostAsJsonAsync("accounts", createCommand);
        }

        IsLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        IsLoading = true;
        var authState = await AuthenticationStateTask;
        var user = authState.User;

        if (user?.Identity == null || !user.Identity.IsAuthenticated)
        {
            return;
        }

        var externalId = user.FindFirst("oid");
        var emails = user.FindFirst("emails");
        if (externalId == null || emails == null)
        {
            return;
        }

        try
        {
            var client = ClientFactory.CreateClient("ServerAPI");
            var accounts = await client.GetFromJsonAsync<List<Account>>($"accounts?externalIds={externalId.Value}");
            var account = accounts?.SingleOrDefault();
            if (account == null)
            {
                IsLoading = false;
                return;
            }

            Model = new AccountModel(account)
            {
                HasAccount = true,
                Emails = JsonSerializer.Deserialize<string[]>(emails.Value),
                ExternalId = new Guid(externalId.Value),
                Name = user.FindFirst("name")?.Value,
                PostalCode = user.FindFirst("postalCode")?.Value,
                Country = user.FindFirst("country")?.Value
            };
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private class AccountModel : Account
    {
        public AccountModel(Account account)
        {
            if (account == null) return;
            Balance = account.Balance;
            Closed = account.Closed;
            Id = account.Id;
            ExternalId = account.ExternalId;
            BankAccountNumber = account.BankAccountNumber;
        }

        public string Name { get; init; }
        public string PostalCode { get; init; }
        public string Country { get; init; }
        public bool HasAccount { get; init; }
        public string CreateOrUpdate => HasAccount ? "Update" : "Create";
        public string[] Emails { get; init; }
    }

}